@startuml

autonumber

skinparam BoxPadding 50

skinParam NoteBackgroundColor WhiteSmoke
skinParam NoteFontColor Black
skinParam ParticipantBackgroundColor WhiteSmoke
skinParam ActorBackgroundColor WhiteSmoke
skinParam AgentBackgroundColor White
skinParam AgentBorderColor SkyBlue
skinparam shadowing false

!define ConsumerColor f8f2ff
!define ProviderColor d9edff
!define WarningColor Business
!define LeadColor Technology

box Consumer http 9191 data 9192 ids 9292 #ConsumerColor
    actor Partner1 as "Partner" #white
    database FileShare1 as "Fileshare"
    database AssetCatalogConsumer as "Asset\nCatalog" #white
    participant ConnectorConsumer as "Eclipse\nDataspace\nConnector" #white
end box

box "Data Eco System (e.g. IDS)"
    participant Broker as "Metadata Catalog\n(IDS Broker)"
    participant DAPS as "Identity Provider\n(IDS DAPS & ParIS)"
end box

box Provider http 8181 data 8182 ids 8282 #ProviderColor
    participant ConnectorProvider as "Eclipse\nDataspace\nConnector" #white
    database AssetCatalogProvider as "Asset\nCatalog" #white
    database FileShare2 as "Fileshare"
    actor Partner2 as "Partner" #white
end box

== Contract Offering ==

Partner2 -> FileShare2 : Insert AssetData
Partner2 -> ConnectorProvider : Configure Contract Offer Framework
rnote right Partner2 #yellow
In order to request any data, a contract agreement
has to be negotiated between provider and consumer.
In a real scenario, a potential consumer would first need to request a description of the
provider's offers in order to get the provider's contract offer.

$ curl -X GET
-H "X-Api-Key: password"
http://localhost:9192/api/v1/data/contractnegotiations
end note
Partner2 -> AssetCatalogProvider : Create Asset

== Contract Negotiation ==
Partner1 -> ConnectorConsumer : Accept Contract for Data Asset
ConnectorConsumer <--> ConnectorProvider : Negotiate Contract
rnote right ConnectorConsumer #yellow
In order to trigger the negotiation, we use Data management api endpoints.
We set our contract offer in the request body.

$ curl -X POST -H "Content-Type: application/json"
-H "X-Api-Key: password"
-d @samples/04.0-file-transfer/contractoffer.json
"http://localhost:9192/api/v1/data/contractnegotiations"
end note
== Data Transfer ==
Partner1 -> ConnectorConsumer : Initiate Data Transfer of Asset
rnote right Partner1 #yellow
We can use the created agreement to request the file
if the negotiation has been completed successfully, the ID of a contract agreement.
The status can be checked at below endpoint:

$ curl -X GET -H 'X-Api-Key: password' "http://localhost:9192/api/v1/data/contractnegotiations/{UUID}"
end note

rnote right Partner1 #yellow
We  will use a pull method to get the artifact.
It is possible to use a push method as well.

$ curl -X POST -H "Content-Type: application/json"
-H "X-Api-Key: password" -
d @samples/04.0-file-transfer/filetransfer.json
"http://localhost:9192/api/v1/data/transferprocess"
end note

alt push
    ConnectorConsumer -> ConnectorProvider ++: Data Request Message
    ConnectorProvider -> FileShare2 ++ : Download
    return AssetData
    ?<- ConnectorProvider --: Push to fileshare/database/...
else pull
    ConnectorConsumer -> ConnectorProvider ++: Data Request Message
    ConnectorProvider -> ConnectorProvider : Policy Validation
        ConnectorProvider -> FileShare2 ++: Download
        return AssetData
    return Data Response Message
    ConnectorConsumer -> ConnectorConsumer : Policy Validation
    ConnectorConsumer -> FileShare1 : Upload AssetData
end alt
Partner1 -> FileShare1 : Access AssetData


@enduml
