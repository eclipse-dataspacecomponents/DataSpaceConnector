@startuml

autonumber

skinparam BoxPadding 50

skinParam NoteBackgroundColor WhiteSmoke
skinParam NoteFontColor Black
skinParam ParticipantBackgroundColor WhiteSmoke
skinParam ActorBackgroundColor WhiteSmoke
skinParam AgentBackgroundColor White
skinParam AgentBorderColor SkyBlue
skinparam shadowing false

!define ConsumerColor f8f2ff
!define ProviderColor d9edff
!define WarningColor Business
!define LeadColor Technology

box Consumer http 9191 data 9192 ids 9292 #ConsumerColor
    actor Partner1 as "Partner" #white
    database AssetCatalogConsumer as "Asset\nCatalog" #white
    participant ConnectorConsumer as "Eclipse\nDataspace\nConnector" #white
end box

box "Consumer Cloud"
    database FileShare1 as "AWS S3"
    participant CloudAPI1 as "CloudAPI"
end box

box "Provider Cloud"
    database FileShare2 as "AWS S3"
    participant CloudAPI2 as "CloudAPI"
end box

rnote right CloudAPI2 #yellow
We use AWS as an example
It can be another cloud provider e.g. Azure
end note

box Provider http 8181 data 8182 ids 8282 #ProviderColor
    participant ConnectorProvider as "Eclipse\nDataspace\nConnector" #white
    participant CloudHttpDataSource as "CloudHttpDataSource" #white
    participant CloudHttpDataSink as "CloudHttpDataSink" #white
    participant CloudProvisioner as "CloudProvisioner" #white
    database AssetCatalogProvider as "Asset\nCatalog" #white
    actor Partner2 as "Partner" #white

    rnote right CloudProvisioner #yellow
    The provisioner's role is to create the download presigned URL
    using you cloud API
    end note
end box

== Contract Offering ==

Partner2 -> FileShare2 : Insert AssetData
Partner2 -> ConnectorProvider : Configure Contract Offer Framework
rnote right Partner2 #yellow
In order to request any data, a contract agreement
has to be negotiated between provider and consumer.
see samples/04.0-file-transfer/transfer-file/src/main/java/org/eclipse/dataspaceconnector/extensions/api/FileTransferExtension.java

In a real scenario, a potential consumer would first need to request a description of the
provider's offers in order to get the provider's contract offer.

$ curl -X GET
-H "Content-Type: application/json"
-H "X-Api-Key: passwordConsumer"
"http://localhost:9192/api/v1/data/contractnegotiations"
end note
Partner2 -> AssetCatalogProvider : Create Asset

== Contract Negotiation ==
Partner1 -> ConnectorConsumer : Accept Contract for Data Asset
ConnectorConsumer <--> ConnectorProvider : Negotiate Contract
rnote right ConnectorConsumer #yellow
In order to trigger the negotiation, we use Data management api endpoints.
We set our contract offer in the request body.

$ curl -X POST
-H "Content-Type: application/json"
-H "X-Api-Key: passwordConsumer"
-d @extensions/data-plane/data-plane-cloud-http/contractoffer.json
"http://localhost:9192/api/v1/data/contractnegotiations"
end note
== Data Transfer ==
Partner1 -> CloudAPI1 : Create Presigned URL for Upload (data destination)
Partner1 -> ConnectorConsumer : Initiate Data Transfer of Asset using the Upload URL
rnote right Partner1 #yellow
We can use the created agreement to request the file
if the negotiation has been completed successfully, the ID of a contract agreement.
The status can be checked at below endpoint:

$ curl -X GET -H "X-Api-Key: passwordConsumer"
"http://localhost:9192/api/v1/data/contractnegotiations/{UUID}"
end note

rnote right Partner1 #yellow
We  will use a pull method to get the artifact.
It is possible to use a push method as well.

$ curl -X POST
-H "Content-Type: application/json"
-H "X-Api-Key: passwordConsumer"
-d @extensions/data-plane/data-plane-cloud-http/transfer.json
"http://localhost:9192/api/v1/data/transferprocess"
end note


ConnectorConsumer -> ConnectorProvider : Data Request Message
ConnectorProvider -> CloudProvisioner : Provision transfer
CloudProvisioner -> CloudAPI2 : Generate Download Presigned URL
return Presigned URL
CloudProvisioner -> CloudHttpDataSource : Provide Download Presigned URL (data source)
CloudHttpDataSource -> FileShare2 : Read content from S3
return Data Content Parts
CloudHttpDataSource -> CloudHttpDataSink : Provide read parts
CloudHttpDataSink -> FileShare1  : Push to fileshare/database/...

Partner1 -> FileShare1 : Access AssetData


@enduml